#include <iostream>
#include <string>
#include <algorithm>

#include "RadiationModel.h"

int main(int argc, char** argv){

    // creation of radiation model

    //cout << "start program " << endl; 

    // grid

    vector <double> grid = {0. ,  0.01010101,  0.02020202,  0.03030303,  0.04040404,
        0.05050505,  0.06060606,  0.07070707,  0.08080808,  0.09090909,
        0.1010101 ,  0.11111111,  0.12121212,  0.13131313,  0.14141414,
        0.15151515,  0.16161616,  0.17171717,  0.18181818,  0.19191919,
        0.2020202 ,  0.21212121,  0.22222222,  0.23232323,  0.24242424,
        0.25252525,  0.26262626,  0.27272727,  0.28282828,  0.29292929,
        0.3030303 ,  0.31313131,  0.32323232,  0.33333333,  0.34343434,
        0.35353535,  0.36363636,  0.37373737,  0.38383838,  0.39393939,
        0.4040404 ,  0.41414141,  0.42424242,  0.43434343,  0.44444444,
        0.45454545,  0.46464646,  0.47474747,  0.48484848,  0.49494949,
        0.50505051,  0.51515152,  0.52525253,  0.53535354,  0.54545455,
        0.55555556,  0.56565657,  0.57575758,  0.58585859,  0.5959596 ,
        0.60606061,  0.61616162,  0.62626263,  0.63636364,  0.64646465,
        0.65656566,  0.66666667,  0.67676768,  0.68686869,  0.6969697 ,
        0.70707071,  0.71717172,  0.72727273,  0.73737374,  0.74747475,
        0.75757576,  0.76767677,  0.77777778,  0.78787879,  0.7979798 ,
        0.80808081,  0.81818182,  0.82828283,  0.83838384,  0.84848485,
        0.85858586,  0.86868687,  0.87878788,  0.88888889,  0.8989899 ,
        0.90909091,  0.91919192,  0.92929293,  0.93939394,  0.94949495,
        0.95959596,  0.96969697,  0.97979798,  0.98989899,  1.};        

    std::transform(grid.begin(), grid.end(), grid.begin(),
                           std::bind1st(std::multiplies<double>(),1));
    // temperature
    vector <double> T(101);
    generate(T.begin(), T.end(), [] () mutable { return 1500; });
    T[0] = 400;
    T[T.size()-1] = 400;
    //for_each(T.begin(), T.end(), [] (double i) { cout << i << " ";});
    //cout << endl;

    // H2O mole fraction
    vector <double> XH2O(99);
    generate(XH2O.begin(), XH2O.end(), [n = 0., l=XH2O.size()] () mutable { return n=0.5; });
    //for_each(XH2O.begin(), XH2O.end(), [] (double i) { cout << i << " ";});
    //cout << endl;

    // CO2 mole fraction
    vector <double> XCO2(99);
    generate(XCO2.begin(), XCO2.end(), [n = 0., l=XCO2.size()] () mutable { return n=0.25; });
    //for_each(XCO2.begin(), XCO2.end(), [] (double i) { cout << i << " ";});
    //cout << endl;

    vector <double> P(99);
    generate(P.begin(), P.end(), [n = 0.] () mutable { return n=1; });
    //for_each(P.begin(), P.end(), [] (double i) { cout << i << " ";});
    //cout << endl;


    // start

    cout << " Start " << endl;

    //string fileinput1 = string(argv[1]);
    //string fileinput2 = string(argv[2]);
    RadiationModel test("WSGG", grid, T, XH2O, XCO2, P, "./res/dqr_T_1000P_1XH2O_20XCO2_20WSGG.res", "./res/qr_T_1000P_1XH2O_20XCO2_20WSGG.res" );
    RadiationModel test2("SNB", grid, T, XH2O, XCO2, P, "./res/dqr_T_1000P_1XH2O_20XCO2_20SNB.res", "./res/qr_T_1000P_1XH2O_20XCO2_20SNB.res" );
    RadiationModel test3("Grey", grid, T, XH2O, XCO2, P, "./res/dqr_T_1000P_1XH2O_20XCO2_20Grey.res", "./res/qr_T_1000P_1XH2O_20XCO2_20Grey.res" );

    test.Solve();
    test2.Solve();
    test3.Solve();

    return 0;
}
